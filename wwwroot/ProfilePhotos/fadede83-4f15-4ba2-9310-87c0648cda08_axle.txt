public Owner createOwner(Owner owner) {
        if(owner == null) {
            throw new
                    ValidationException(HttpStatus.BAD_REQUEST.value(), "Owner details should not be empty");
        }
        else if(owner.getName().isEmpty()){
            throw new
                    ValidationException(HttpStatus.BAD_REQUEST.value(), "Name field should not be empty");
        }
        else if(owner.getLocation().isEmpty()){
            throw new
                    ValidationException(HttpStatus.BAD_REQUEST.value(), "Location field should not be empty");
        }
        else if(owner.getPhone().isEmpty()){
            throw new
                    ValidationException(HttpStatus.BAD_REQUEST.value(), "phone number should not be empty");
        }
        else if(owner.getEmail().isEmpty()){
            throw new
                    ValidationException(HttpStatus.BAD_REQUEST.value(), "Email field should not be empty");
        }
        else {
            owner.setCreatedAt(System.currentTimeMillis());
            return ownerRepository.save(owner);
        }
    }


--------------------------------------------------------------------
db.jobCard.updateOne(
    { "jobCardKey": "electricalComponents" }, // Filter: Find the document with jobCardKey equal to "electricalComponents"
    {
        $push: {
            "jobAttributes": {
                $each: [
                    {
                        "attributesName": "cabinFanLowHigh",
                        "attributesDisplayName": "Cabin Fan Low High",
                        "step": "Step 1",
                        "classifiers": [
                            "status",
                            "result",
                            "description",
                            "estimatedRepairCostStandard",
                            "estimatedRepairCostPlanetFriendly",
                            "image"
                        ]
                    }
                ],
                $position: 7
            }
        }
    }
);
