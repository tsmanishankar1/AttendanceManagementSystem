Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJtVi01M2hKenZmTHVzblBQZ0E2MlRpOHlOZ0NZODJIaWhhcXNhVjg4RU9ZIn0.eyJleHAiOjE3MTMzODkzMzYsImlhdCI6MTcxMzM1MzMzNywiYXV0aF90aW1lIjoxNzEzMzUzMzM3LCJqdGkiOiJlNDllMzFmNC1mOWNjLTQxZTAtYmUzNS00NzU3NWU3NTkzNjEiLCJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjgwODAvYXV0aC9yZWFsbXMvZXZodWIiLCJhdWQiOiJhcHAtYXBpIiwic3ViIjoiN2UwNjE2NzYtMmYxZC00ZTk4LTllYTItZDFhZGUzNDJjNTIxIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiYXBwLWNvbnNvbGUiLCJub25jZSI6ImVhYTllNTJlLTZlZTgtNDY0Mi04OWI2LTVlM2ZmOGVjNzBiMCIsInNlc3Npb25fc3RhdGUiOiI4MTIxODNkNy00ZWI2LTRhNDctODJmMS04M2M3MGEwZjJjNmEiLCJhY3IiOiIxIiwiYWxsb3dlZC1vcmlnaW5zIjpbIioiXSwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbIkFkbWluIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYXBwLWFwaSI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGUiXX19LCJzY29wZSI6Im9wZW5pZCBlbWFpbCBwcm9maWxlIiwic2lkIjoiODEyMTgzZDctNGViNi00YTQ3LTgyZjEtODNjNzBhMGYyYzZhIiwiZW1haWxfdmVyaWZpZWQiOmZhbHNlLCJuYW1lIjoiS291c2lraSBTIiwicHJlZmVycmVkX3VzZXJuYW1lIjoia291c2lraSIsImdpdmVuX25hbWUiOiJLb3VzaWtpIiwiZmFtaWx5X25hbWUiOiJTIiwiZW1haWwiOiJraXNob3Jla3VtYXIuY2xpY2tAZ21haWwuY29tIn0.QiMl9pkpXjL1hM2NHMW5vVqVTznCuj1GHRJoCn5GDnTBTP93IXHibzV7meeWtaJ3YOQtfyqKfAQiuVvLCyKl1rCuijT0gs-vRwMtbTLOtp2Ph7zMmdGjMrBQ5w1nPZNqklEMUN_K1rP2-veb0Z8sXvA-S1nFzxu8hWsKgarXylAJKt7IX9AeVhRPeYJciXa4cpLpUaBONOub9a0P06DFRQ30XyJF3MYsvZckt9WPHyCoSHv_W399CwXU3SsmbFmnfZkNGgHlR2XoRlGFXto8f6-4rZ9LoAyGSGDI6ijNLps1WaZHq793sHnslYKblpPKFEJRmYoZMcrz-LhCsHxkGQ

Mechanic
Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJtVi01M2hKenZmTHVzblBQZ0E2MlRpOHlOZ0NZODJIaWhhcXNhVjg4RU9ZIn0.eyJleHAiOjE3MTk0MzA2NTYsImlhdCI6MTcxOTM5NDY3OCwiYXV0aF90aW1lIjoxNzE5Mzk0NjU2LCJqdGkiOiI0Yjc0YzFlNy00YTUxLTQ2ODItOTQ3Mi1mMTM3MzRiODczYTciLCJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjI4MDgwL2F1dGgvcmVhbG1zL2V2aHViIiwiYXVkIjoiYXBwLWFwaSIsInN1YiI6ImRmNWU4Zjc2LTMyYmItNGNjNi1iMDI3LWNjYTRkZDUzZTRkNyIsInR5cCI6IkJlYXJlciIsImF6cCI6ImFwcC1jb25zb2xlIiwibm9uY2UiOiIyMmE1ZDUxYS1iZTViLTQwMTQtYTI1Yy1jNWM5YzAxMGQyZmYiLCJzZXNzaW9uX3N0YXRlIjoiZTY2Zjk1NmEtYzEzYi00ZDYzLWE5MjEtMWUxZGFjY2U4NjlkIiwiYWNyIjoiMCIsImFsbG93ZWQtb3JpZ2lucyI6WyIqIl0sInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJNZWNoYW5pYyJdfSwicmVzb3VyY2VfYWNjZXNzIjp7ImFwcC1hcGkiOnsicm9sZXMiOlsiZGVmYXVsdC1yb2xlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsInNpZCI6ImU2NmY5NTZhLWMxM2ItNGQ2My1hOTIxLTFlMWRhY2NlODY5ZCIsImVtYWlsX3ZlcmlmaWVkIjpmYWxzZSwibmFtZSI6Im0xIG0xIiwicHJlZmVycmVkX3VzZXJuYW1lIjoibWVjaGFuaWMiLCJnaXZlbl9uYW1lIjoibTEiLCJmYW1pbHlfbmFtZSI6Im0xIiwiZW1haWwiOiJtZWNoYW5pY0BrcnlwdG9zdGVjaC5jb20ifQ.esmG1LLh5RHEMIuRnu-GyzDQlLetxE7fl5LVrnDhbNRg_kzENHUUwmUXolVpy5AQRm7q-eCFxsHDunA8zcqsGs9WOsQKGfurV7WEO_E_6UkCAD63nGZY07OLTD_SYvL7pxGtiL5pHqYeoOE7aWsIocWZncRKJCzZTttJLZpXQ8CBTmz8QYqmedXfpKqKha88PMrnSFX2HlY6NGtjglIcfOhITTzFuN3k7UWOjPehQ4lDzaeWiBn1if3EqV0S8EkvDV7-SsiEIOg4VNg_W7uvlqG6KVPsGsGMyVKcyc5AwYKpFoyWakiG8wITNIcyoDzEqgXfkXHzeZQ49F3AvPnO9g

Admin
Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJtVi01M2hKenZmTHVzblBQZ0E2MlRpOHlOZ0NZODJIaWhhcXNhVjg4RU9ZIn0.eyJleHAiOjE3MjAxMjAxMDMsImlhdCI6MTcyMDA4NDE0OCwiYXV0aF90aW1lIjoxNzIwMDg0MTAzLCJqdGkiOiJmZWQ3NzMxNy1iOWNkLTQzMDQtYThjOC00MGZiYTAwZTNjMmMiLCJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjI4MDgwL2F1dGgvcmVhbG1zL2V2aHViIiwiYXVkIjoiYXBwLWFwaSIsInN1YiI6IjdlMDYxNjc2LTJmMWQtNGU5OC05ZWEyLWQxYWRlMzQyYzUyMSIsInR5cCI6IkJlYXJlciIsImF6cCI6ImFwcC1jb25zb2xlIiwibm9uY2UiOiI5NTdhNmNkMy03N2UyLTQ0MzgtODM0Mi03YzFiODA1YjUyNzciLCJzZXNzaW9uX3N0YXRlIjoiNWIyYzNjZmUtY2MzYy00NDdiLWFlMjEtNzQ0YWNmOGRjMmJkIiwiYWNyIjoiMCIsImFsbG93ZWQtb3JpZ2lucyI6WyIqIl0sInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJBZG1pbiJdfSwicmVzb3VyY2VfYWNjZXNzIjp7ImFwcC1hcGkiOnsicm9sZXMiOlsiZGVmYXVsdC1yb2xlIl19fSwic2NvcGUiOiJvcGVuaWQgZW1haWwgcHJvZmlsZSIsInNpZCI6IjViMmMzY2ZlLWNjM2MtNDQ3Yi1hZTIxLTc0NGFjZjhkYzJiZCIsImVtYWlsX3ZlcmlmaWVkIjpmYWxzZSwibmFtZSI6IktvdXNpa2kgUyIsInByZWZlcnJlZF91c2VybmFtZSI6ImtvdXNpa2kiLCJnaXZlbl9uYW1lIjoiS291c2lraSIsImZhbWlseV9uYW1lIjoiUyIsImVtYWlsIjoia2lzaG9yZWt1bWFyLmNsaWNrQGdtYWlsLmNvbSJ9.L4zptr6X42dN63nmaMSnxBmrNN-AIAkdt-tcqCrClU1SqYquZ1qLIRVxby4nRaCUG_qGBDizTGftIvGLtwAo9o9e_UgwqiIeee3P1-gzgjw53P5e_piTXPg32D4l_3fH509XLPZHLtzqrLbwxPGmkuMzFBnDcO255tkHVUG0lw-ctroACE5vGjsCkWucm6Gd_pb8YDWk7KNLDDpyuacaKnnk3hfQEr8voKlBDJRxzbFxsyB8e2ccUQYpiKfuT6PDNEyDMLtt17SHxUFIc11hNF47Qy2Xo27reD_FGYol3-bWDYuDHLlc75Ya5zpPcEgc_jL6TFhqK7pRAPOdCjpk6w


https://demo.twilio.com/welcome/sms/reply
sms
248WKX9NMPFT2BRMK77BGF7U
pass:EvhubProject@123

smtp:
    host: smtp.gmail.com
    port: 587
    username: kousikiskm@gmail.com
    password: adpixldynylhglyj
    auth: true
    starttls:
      enable: true


// Function to convert a string to title case
function toTitleCase(str) {
    if (!str) return str; // Return if the string is null or undefined
    return str.toLowerCase().split(' ').map(function(word) {
        return word.charAt(0).toUpperCase() + word.slice(1);
    }).join(' ');
}

// Find all documents in the vehicles collection and update brand and model to title case
db.vehicles.find().forEach(function(vehicle) {
    var updatedBrand = toTitleCase(vehicle.brand);
    var updatedModel = toTitleCase(vehicle.model);

    db.vehicles.updateOne(
        { _id: vehicle._id },
        { $set: { brand: updatedBrand, model: updatedModel } }
    );
});


// Function to convert a string to title case
function toTitleCase(str) {
    if (!str) return str; // Return if the string is null or undefined
    return str.toLowerCase().split(' ').map(function(word) {
        return word.charAt(0).toUpperCase() + word.slice(1);
    }).join(' ');
}

// Find all documents in the vehicles collection and update brand and model to title case
var modifiedCount = 0; // Variable to store the modified count

db.vehicles_copy.find().forEach(function(vehicle) {
    var updatedBrand = toTitleCase(vehicle.brand);
    var updatedModel = toTitleCase(vehicle.model);

    var result = db.vehicles_copy.updateOne(
        { _id: vehicle._id },
        { $set: { brand: updatedBrand, model: updatedModel } }
    );

    modifiedCount += result.modifiedCount || 0; // Increment modified count
});

// Print the modified count
print("Modified count:", modifiedCount


     // Normalize brand and model fields
    normalizeBrandAndModel(vehicle);
    vehicle.setBrand(vehicle.getBrand());
    vehicle.setModel(vehicle.getModel());


  private void normalizeBrandAndModel(FilterRequest filterRequest) {
    if (filterRequest != null) {
      List<String> brands = filterRequest.getBrands(); // Retrieve list of brands
      List<String> models = filterRequest.getModel(); // Retrieve list of models
      if (brands != null) {
        List<String> normalizedBrands = brands.stream()
                .map(this::toTitleCase) // Normalize each brand in the list
                .collect(Collectors.toList());
        filterRequest.setBrands(normalizedBrands); // Set the normalized list of brands
      }
      if (models != null) {
        List<String> normalizedModels = models.stream()
                .map(this::toTitleCase) // Normalize each model in the list
                .collect(Collectors.toList());
        filterRequest.setModel(normalizedModels); // Set the normalized list of models
      }
    }
  }
  private String toTitleCase(String input) {
    if (input == null || input.isEmpty()) {
      return input;
    }

    String[] words = input.toLowerCase().split(" ");
    StringBuilder sb = new StringBuilder();

    for (String word : words) {
      if (!word.isEmpty()) {
        sb.append(Character.toUpperCase(word.charAt(0))).append(word.substring(1)).append(" ");
      }
    }

    return sb.toString().trim();
  }






private void copyFontsToTempFolder() {
    String tempDirPath = System.getProperty("java.io.tmpdir");
    File tmpDir = new File(tempDirPath, "myapp_tmp");
    tmpDir.mkdirs(); // Ensure the directory exists

    // Example retry mechanism
    int maxRetries = 3;
    int retryCount = 0;
    boolean success = false;

    while (!success && retryCount < maxRetries) {
        try {
            // Copy font file to the temporary directory
            byte[] medium500 = getClass().getResource("/font/PoppinsMedium500.ttf").openStream().readAllBytes();
            File mediumFile = new File(tmpDir, "PoppinsMedium500.ttf");
            try (OutputStream outputStream = new FileOutputStream(mediumFile)) {
                outputStream.write(medium500);
            }

            // Logging the paths used
            System.out.println("Copied font file to: " + mediumFile.getPath());

            success = true; // Set success flag if file operation succeeded
        } catch (IOException e) {
            retryCount++;
            if (retryCount >= maxRetries) {
                throw new RuntimeException("Failed to copy font file after " + maxRetries + " retries: " + e.getMessage(), e);
            }
            // Log retry attempt
            System.err.println("Retry attempt " + retryCount + ": " + e.getMessage());
            // Optionally add a delay before retrying
            // Thread.sleep(1000); // 1 second delay
        }
    }
}

lskjflkdhfhkshdfhs
dkkjfjjdkfdjgfgd
sdjfhksjhfhdjfh
jshdfdhgfsjdfskkjdf
ksjdfhdjkgfgd
kjjjjjjjjjjj


